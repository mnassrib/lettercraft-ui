name: CI/CD Pipeline

# Déclenchement du workflow via repository_dispatch suite à la réception d'un événement depuis le dépôt privé
on:
  repository_dispatch:
    types: [deploy]

jobs:
  ci_cd:
    runs-on: ubuntu-latest

    steps:

      # ====================== PARTIE 1: Tests sur GitHub sans conteneurisation ======================

      # Étape 1 : Installer PostgreSQL
      - name: Part 1/step 1 - Install PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql postgresql-contrib
          sudo service postgresql start

      # Étape 2 : Créer l'utilisateur et la base de données PostgreSQL
      - name: Part 1/step 2 - Create PostgreSQL user and database
        run: |
          sudo -u postgres psql -c "CREATE USER ${{ secrets.POSTGRES_USER }} WITH PASSWORD '${{ secrets.POSTGRES_PASSWORD }}';"
          sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.POSTGRES_DB_TEST }} OWNER ${{ secrets.POSTGRES_USER }};"

      # Étape 3 : Cloner le dépôt privé contenant le code source de l'application
      - name: Part 1/step 3 - Checkout code from the private repository
        uses: actions/checkout@v3
        with:
          repository: mnassrib/lettercraft-backend
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      # Étape 4 : Configurer l'environnement Python
      - name: Part 1/step 4 - Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Étape 5 : Définir les variables d'environnement 
      - name: Part 1/step 5 - Set environment variables
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
          echo "RECAPTCHA_SITE_KEY=${{ secrets.RECAPTCHA_SITE_KEY }}" >> $GITHUB_ENV
          echo "RECAPTCHA_SECRET_KEY=${{ secrets.RECAPTCHA_SECRET_KEY }}" >> $GITHUB_ENV
          echo "FLASK_CONFIG=testing" >> $GITHUB_ENV
          echo "TEST_DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB_TEST }}" >> $GITHUB_ENV

      # Étape 6 : Installer les dépendances du projet et appliquer les migrations des données pour synchroniser le schéma
      - name: Part 1/step 6 - Install dependencies and run migrations
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "Running database migration in testing mode"
          echo "FLASK_CONFIG is set to: $FLASK_CONFIG"  # Vérifiez si FLASK_CONFIG est bien testing
          flask db upgrade

      # Étape 7 : Exécuter les tests unitaires sur l'application sans conteneurisation
      - name: Part 1/step 7 - Run tests
        run: |
          FLASK_CONFIG=$FLASK_CONFIG pytest

      # ====================== PARTIE 2: Tests en conteneur pour simuler un environnement de production ======================

      # Étape 8 : Construire l'image Docker pour l'application en utilisant le Dockerfile
      - name: Part 2/step 8 - Build Docker image
        run: |
          docker build -t lettercraft .

      # Étape 9 : Appliquer les migrations dans le conteneur Docker
      - name: Part 2/step 9 - Apply database migrations in Docker container
        run: |
          docker run --rm --network="host" \
                    -e SECRET_KEY=$SECRET_KEY \
                    -e RECAPTCHA_SITE_KEY=$RECAPTCHA_SITE_KEY \
                    -e RECAPTCHA_SECRET_KEY=$RECAPTCHA_SECRET_KEY \
                    -e TEST_DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB_TEST }} \
                    -e FLASK_CONFIG=$FLASK_CONFIG \
                    lettercraft flask db upgrade

      # Étape 10 : Lancer un conteneur Docker et tester l'application dans un environnement en mode "testing"
      - name: Part 2/step 10 - Run Docker container for testing
        run: |
          docker run -d --network="host" \
                    -e SECRET_KEY=$SECRET_KEY \
                    -e RECAPTCHA_SITE_KEY=$RECAPTCHA_SITE_KEY \
                    -e RECAPTCHA_SECRET_KEY=$RECAPTCHA_SECRET_KEY \
                    -e TEST_DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB_TEST }} \
                    -e FLASK_CONFIG=$FLASK_CONFIG \
                    --name lettercraft-test lettercraft
          docker exec lettercraft-test pytest
          docker stop lettercraft-test
          docker rm lettercraft-test

      # ====================== PARTIE 3: Appliquer les migrations en production et déployer sur Render ======================

      # Étape 11 : Appliquer les migrations sur la base de données de Render (avant déploiement)
      - name: Part 3/step 11 - Migrate Database on Render
        run: |
          docker run --rm \
                    -e SECRET_KEY=$SECRET_KEY \
                    -e RECAPTCHA_SITE_KEY=$RECAPTCHA_SITE_KEY \
                    -e RECAPTCHA_SECRET_KEY=$RECAPTCHA_SECRET_KEY \
                    -e PROD_DATABASE_URL=${{ secrets.PROD_DATABASE_URL }} \
                    lettercraft flask db upgrade

      # Étape 12 : Déployer l'application sur Render après validation des migrations
      - name: Part 3/step 12 - Deploy to Render
        run: |
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }} \
            -H 'Authorization: Bearer ${{ secrets.RENDER_API_KEY }}' \
            -H 'Accept: application/json' \
            -d ''

      # Étape 13 (optionnelle) : Notifier de la réussite du déploiement
      - name: Part 3/step 13 - Notify deployment success
        run: echo "Deployment to Render was successful!"