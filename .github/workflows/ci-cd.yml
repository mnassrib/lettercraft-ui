name: CI/CD Pipeline

# Déclenchement du workflow via repository_dispatch (venant du dépôt privé)
on:
  repository_dispatch:
    types: [deploy]

jobs:
  ### Job CI (Continuous Integration)
  ci:
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Cloner le dépôt privé (CI)
      - name: Checkout code from the private repository
        uses: actions/checkout@v3
        with:
          repository: mnassrib/lettercraft-backend
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      
      # Étape 2 : Configurer l'environnement Python (CI)
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Étape 3 : Installer les dépendances du projet (CI)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # Étape 4 : Exécuter les tests (CI)
      - name: Run tests
        run: |
          pytest --maxfail=5 --disable-warnings

      # Étape 5 : Sauvegarder les fichiers pour le job CD (artefacts)
      - name: Upload code as artifact for CD
        uses: actions/upload-artifact@v3
        with:
          name: source-code  # Nom de l'artefact
          path: ./  # Sauvegarder tout le dépôt pour le job CD

  ### Job CD (Continuous Deployment) - Dépend de la réussite du job CI
  cd:
    runs-on: ubuntu-latest
    needs: ci  # Ce job s'exécute uniquement si le job 'ci' réussit

    steps:
      # Étape 6 : Télécharger les fichiers du job CI
      - name: Download source code artifact
        uses: actions/download-artifact@v3
        with:
          name: source-code  # Télécharger l'artefact sauvegardé dans le job CI

      # Étape 7 : Créer une image Docker pour validation (CD)
      - name: Build Docker image
        run: |
          docker build -t lettercraft .

      # Option : Tests supplémentaires dans le conteneur après la création de l'image (CD)
      - name: Run Docker container for testing
        run: |
          docker run -d -p 8080:8080 --name test_container lettercraft
          sleep 5  # Attendre que le conteneur soit lancé
          curl http://localhost:8080/health  # Exemple de test pour vérifier que l'application fonctionne
      # Arrêter et supprimer le conteneur après les tests
      - name: Cleanup Docker container
        run: |
          docker stop test_container
          docker rm test_container

      # Étape 8 : Déployer sur Render après validation de l'image (CD)
      - name: Deploy to Render
        run: |
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}  \
            -H 'Authorization: Bearer ${{ secrets.RENDER_API_KEY }}' \
            -H 'Accept: application/json' \
            -d ''

      # Étape optionnelle : Notifier de la réussite du déploiement (CD)
      - name: Notify deployment success
        run: echo "Deployment to Render was successful!"
